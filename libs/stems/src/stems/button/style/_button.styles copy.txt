@use '../../../../../chlorophyll/scss/components/button/mixins' as button;
// @include button.reset();
// @include button.base();
// @include button.secondary();
@layer base, state, special;

@import './button.mixins.scss';

:host {
  --gds-button-transition: var(--gds-sys-transition);
  --gds-button-bg: var(--gds-primary-background-color);
  --gds-button-color: var(--gds-primary-color);
  --gds-button-border-radius: var(--gds-sys-border-radius);
  --gds-button-border-width: var(--gds-sys-border-width);
  --gds-button-border-color: var(--gds-primary-border-color);
  --gds-button-border-style: var(--gds-sys-border-style);
  --gds-button-padding-inline: var(--gds-sys-padding-inline);
  --gds-button-padding-block: var(--gds-sys-padding-block);
  --gds-button-gap: var(--gds-sys-gap);

  @include button-tokens('ghost');
}

button {
  align-items: center;
  background-color: var(--gds-button-bg);
  block-size: 100%;

  // Coloring
  border-color: var(--gds-button-border-color);
  border-radius: var(--gds-button-border-radius);
  border-style: var(--gds-button-border-style);
  box-sizing: border-box;
  color: var(--gds-button-color);
  color: var(--gds-button-color);

  // Optional
  color-scheme: light dark;
  cursor: pointer;
  display: flex;
  gap: var(--gds-button-gap);
  inline-size: max-content;
  justify-content: space-between;
  justify-items: center;
  padding-block: var(--gds-button-padding-block);
  padding-inline: var(--gds-button-padding-inline);
  transition: var(--gds-button-transition);
}

:host([variant='secondary']) {
  @include button-variant('secondary');
}

:host([variant='tertiary']) {
  @include button-variant('tertiary');
}

/* experimental */

// Hover state
// @media (hover: hover) {
//   button {
//     &:hover {
//       background-color: hsl(0, 0%, 0%);
//     }
//   }
// }

::slotted(svg) {
  height: 12px;
  width: 12px;
}

// :host([positive]) button {
//   background-color: hsl(120, 100%, 25%);
// }

// :host([destructive]) button {
//   background-color: hsl(348, 83%, 47%);
// }

// :host([secondary]) button {
//   background-color: hsl(180, 100%, 25%);
// }

// :host([tertiary]) button {
//   background-color: hsl(39, 100%, 50%);
// }

/* @layers */
@supports (color: revert-layer) {
  @layer base {
    button {
      color: hsl(0, 100%, 50%);
    }
  }

  @layer special {
    button {
      color: revert-layer;
    }
  }

  @layer state {
    button {
      color: hsl(0, 0%, 0%);
    }
  }
}

/* Dark mode */
@media (prefers-color-scheme: dark) {
  :host([dark-mode]) button {
    background-color: hsl(180, 100%, 50%);
  }
}

/* Contain */
@media (contain: style) {
  button {
    contain: layout;
  }
}

/* 
  Isolation 
  The isolation CSS property determines whether an element must create a new stacking context.
*/
@supports (isolation: isolate) {
  button {
    isolation: isolate;
  }
}

/* Inset */
@supports (inset: 0) {
  button {
    inset: 0;
  }
}

/* Blur */
@supports (backdrop-filter: blur(20px)) {
  :host([blur]) button {
    backdrop-filter: blur(20px);
  }
}

/* Container */

@supports (container: button / normal) {
  button {
    container: button / normal;
  }

  @container button (min-width: 138px) {
    button {
      padding-inline: 24px;
    }
  }
}

/* 
  Animate display none 
  This functionality will animate display none to display block
*/
// @supports (transition: display 0.2s) {
//   button {
//     transition: display 0.2s;
//   }
// }
