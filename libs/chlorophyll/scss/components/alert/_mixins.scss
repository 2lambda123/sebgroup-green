@use 'sass:map';
@use '../../common';

// alerts have a dependency to links
@use '../../components/link/mixins' as link;
@use '../../components/button/mixins' as button;

$variants: (
  'info': (
    color: hsl(var(--sg-intent-info-hsl-contrast)),
    border-color: transparent,
    link-outline-color:
    hsla(var(--sg-intent-info-hsl-contrast), link.$outline-opacity),
    background: hsl(var(--sg-intent-info-hsl)),
    ghost-button-type: 'light'
  ),
  'success': (
    color: hsl(var(--sg-intent-success-hsl-contrast)),
    border-color: transparent,
    link-outline-color:
    hsla(var(--sg-intent-success-hsl-contrast), link.$outline-opacity),
    background: hsl(var(--sg-intent-success-hsl)),
    ghost-button-type: 'light'
  ),
  'warning': (
    color: hsl(var(--sg-intent-warning-hsl-contrast)),
    border-color: transparent,
    link-outline-color:
    hsla(var(--sg-intent-warning-hsl-contrast), link.$outline-opacity),
    background: hsl(var(--sg-intent-warning-hsl)),
    ghost-button-type: 'dark'
  ),
  'danger': (
    color: hsl(var(--sg-intent-critical-hsl-contrast)),
    border-color: transparent,
    link-outline-color:
    hsla(var(--sg-intent-critical-hsl-contrast), link.$outline-opacity),
    background: hsl(var(--sg-intent-critical-hsl)),
    ghost-button-type: 'light'
  ),
);

$background: hsl(var(--sg-intent-neutral-hsl));
$border-radius: 0;
$border: solid 1px var(--border-color);
$close-bg-hover: var(--sg-hsl-black);
$color: hsl(var(--sg-intent-neutral-hsl-contrast));
$link-outline-color: hsla( var(--sg-intent-neutral-hsl-contrast), link.$outline-opacity );
$max-content-width: 768px;

@mixin alert {
  --background: #{$background};
  --color: #{$color};
  --border-color: #{$color};
  background: var(--background);
  border-radius: $border-radius;
  border: $border;
  color: var(--color);
  @include common.padding-vertical(5);
  @include common.padding-horizontal(5);

  // layout
  display: inline-grid;
  grid-template-columns: auto 1fr auto;
  grid-template-rows: min-content 1fr;
  grid-template-areas:
    'icon content dismiss'
    'footer footer footer';

  @include common.media-breakpoint-up('sm') {
    grid-template-areas:
      'icon content dismiss'
      'icon content footer';
  }

  // icon
  > i {
    display: block;
    width: 1.5rem;
    height: 1.5rem;
    margin-inline-end: .5rem;
    grid-area: icon;

    svg > * {
      fill: $color;
    }
  }

  // content
  > div {
    grid-area: content;
    max-width: $max-content-width;

    > h1,
    h2,
    h3,
    h4,
    h5,
    .header {
      display: inline;
      font-size: 1rem;
      font-weight: 500;
      line-height: 1.5rem;
      margin-right: 0.25rem;
    }
    > p {
      display: inline;
      @include common.margin-vertical(0);
    }
  }

  // dismiss
  button.close {
    grid-area: dismiss;
    justify-self: flex-end;
    margin: 0 -0.5rem 0 0.5rem;
    --background-hsl: #{$close-bg-hover};
    --color: #{$color};
    @include common.media-breakpoint-up('sm') {
      + footer {
        @include common.margin-top(4);
      }
    }
  }

  // links
  @include link.variant($color, $link-outline-color);
  a {
    text-decoration: underline !important;
    transition: opacity 300ms ease-in-out;
    &:hover {
      opacity: 0.5;
    }
  }

  // footer
  > footer {
    grid-area: footer;
    align-self: center;
    @include common.media-breakpoint-only('xs') {
      @include common.margin-top(4);
    }
    @include common.media-breakpoint-up('sm') {
      @include common.margin-start(4);
    }
    > a {
      display: flex;
    }
    > a,
    > button,
    > button[type=button],
    > .button {
      &:not(.primary,.ghost,.close,.link, [type='submit'], :disabled,.disabled,[aria-disabled]) {
        @include button.ghost-dark();
        /*border-color: currentColor;
        color: currentColor;*/
      }

      + {
        a,
        button,
        .button {
          @include common.media-breakpoint-only('xs') {
            @include common.margin-top(4);
          }
          @include common.media-breakpoint-up('sm') {
            @include common.margin-start(4);
          }
        }
      }
    }
  }
  // add styles for each variant
  @each $variant, $colors in $variants {
    &.#{$variant} {
      @include alert-variant(
          map.get($colors, 'color'),
          map.get($colors, 'background'),
          map.get($colors, 'border-color'),
          map.get($colors, 'ghost-button-type')
      );

      // style for nested links
      @include link.variant(
          map.get($colors, 'color'),
          map.get($colors, 'link-outline-color')
      );
    }
  }
}

@mixin alert-variant($color, $background, $border-color, $ghost-button-type) {
  --background: #{$background};
  --color: #{$color};
  --border-color: #{$border-color};
  // alert close
  .close {
    --color: #{$color};
  }

  i > svg > * {
    fill: $color;
  }

  > footer {
    > a,
    > button,
    > button[type=button],
    > .button {
      &:not(.primary,.ghost,.close,.link, [type='submit'], :disabled,.disabled,[aria-disabled]) {
        @if ($ghost-button-type == 'light') {
          @include button.ghost-light()
        } @else {
          @include button.ghost-dark()
        }
      }
    }
  }
}
