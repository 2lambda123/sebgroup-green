@use 'sass:map';
@use '../../tokens';
@use '../../common';

$selector-class: '.slide-toggle';
$selector-base: 'button[aria-pressed]' + $selector-class;
$selector-pressed: 'button[aria-pressed=true]' + $selector-class;
$selector-not-pressed: 'button[aria-pressed=false]' + $selector-class;

$_track_height: 1.5rem;
$_track_width: 2.75rem;
$_track_height_mobile: 2rem;
$_track_width_mobile: 3.5rem;
$_track_color: var(--sg-grey-400);
$_track_color_hover: var(--sg-grey-500);
$_track_color_pressed: hsl(var(--sg-hsl-green-1));
$_track_color_pressed_hover: hsl(var(--sg-hsl-green-2));

$_thumb_width: 1.25rem;
$_thumb_width_mobile: 1.75rem;
$_thumb_hover_nudge: .25rem;
$_thumb_color: white;

$_breakpoint-mobile-layout: map.get(tokens.$grid-breakpoints, 'sm');

@mixin add-slide-toggle-base {
  @include common.padding(1);
  @include common.margin-horizontal(3);
  @include common.add-focus();

  width: $_track_width;
  height: $_track_height;
  border-radius: $_track_height;
  appearance: none;
  background: $_track_color;
  text-align: left;
  transition: 150ms;
  vertical-align: sub;
  
  &:hover {
    background-color: $_track_color_hover;
  }

  // Thumb
  &::after {
    content: '';
    display: inline-block;
    background-color: $_thumb_color;
    height: 100%;
    border-radius: 100%;
    aspect-ratio: 1;
    transition: 300ms;
    box-shadow:
      0 2px 8px 0 rgba(0,0,0,0.15),
      0 1px 2px 0 rgba(0,0,0,0.15),
      0 1px 0 0 rgba(0,0,0,0.06);
  }

  &:hover::after {
    transform: translateX($_thumb_hover_nudge);
  }

  @media (max-width: $_breakpoint-mobile-layout) {
    width: $_track_width_mobile;
    height: $_track_height_mobile;
  }
}

@mixin add-slide-toggle-state-pressed {
  //                                            Padding
  $thumb_pressed_translateX: $_track_width - (0.125rem * 2) - $_thumb_width;
  $thumb_pressed_translateX_mobile: $_track_width_mobile - (0.125rem * 2) - $_thumb_width_mobile;

  background: $_track_color_pressed;

  &:hover {
    background-color: $_track_color_pressed_hover;
  }

  &::after {
    transform: translateX($thumb_pressed_translateX);
  }

  &:hover::after {
   transform: translateX($thumb_pressed_translateX - $_thumb_hover_nudge);
  }

  @media (max-width: $_breakpoint-mobile-layout) {
    &::after {
      transform: translateX($thumb_pressed_translateX_mobile);
    }
    &:hover::after {
      transform: translateX($thumb_pressed_translateX_mobile - $_thumb_hover_nudge);
     }
  }
}