@use '../../../tokens/shame' as tokens;
@use '../../../common';
@use './tokens' as component-tokens;


$valid-color: tokens.$intent-success-background;
$invalid-color: tokens.$intent-danger-background;

@mixin add-checkbox(
  $selector: '.form-control',
  $checkbox-selector: 'input[type="checkbox"]',
  $validated-selector: '.was-validated'
) {
  /* Hide the browser's default checkbox */
  #{$selector} #{$checkbox-selector} {
    cursor: pointer;
    height: 0;
    opacity: 0;
    position: absolute;
    width: 0;
    z-index: -1;
  }

  /* Add focus to form-control field */
  #{$selector}:has( input[type="checkbox"]:focus-visible) {
    @include common.add-focus('within');
  }

  /* Style for custom checkbox */
  #{$selector} #{$checkbox-selector} ~ i {
    @include common.add-border(false, 1px, var(--gds-comp-checkbox-border-color));
    @include common.margin-end(4);
    position: relative;
    border-radius: var(--gds-comp-checkbox-border-radius);
    background-color: var(--gds-comp-checkbox-container-color);
    flex: 0 0 auto;
    height: var(--gds-comp-checkbox-container-width);
    width: var(--gds-comp-checkbox-container-width);
  }

  #{$selector} #{$checkbox-selector}:not(:checked):focus-visible ~ i {
    border: 1px solid var(--gds-sys-color-blue-dark-2);
  }

  /* Hover state */
  #{$selector}:hover #{$checkbox-selector}:not(.disabled,:disabled,:checked) ~ i {
    border-color: var(--gds-comp-checkbox-hover-border-color);
  }

  #{$selector}:hover #{$checkbox-selector}:not(:checked) ~ i::after {
    border-color: var(--gds-comp-checkbox-hover-border-color);
    opacity: 1;
  }

  /* Checked state */
  #{$selector} #{$checkbox-selector}:checked ~ i {
    background-color: var(--gds-comp-checkbox-container-color-selected);
  }

  /* Valid state */
  #{$validated-selector}
    #{$selector}
    #{$checkbox-selector}:not(.is-invalid):valid,
  #{$selector} #{$checkbox-selector}.is-valid {
    ~ i {
      @include common.add-border-color($valid-color);
    }
  }

  /* Invalid state */
  #{$validated-selector}
    #{$selector}
    #{$checkbox-selector}:not(.is-valid):invalid,
  #{$selector} #{$checkbox-selector}.is-invalid {
    ~ i {
      @include common.add-border-color($invalid-color);
    }
  }

  /* Disabled state */
  #{$selector} #{$checkbox-selector}:disabled,
  #{$selector} #{$checkbox-selector}.disabled {
    ~ i {
      @include common.add-disable(false, false, true);
    }

    &:checked ~ i {
      @include common.add-disable(true, false, true);
    }

    ~ span {
      @include common.add-disable(false, true, false);
    }
  }

  /* Checkmark */
  #{$selector} #{$checkbox-selector} ~ i::after {
    content: '';
    opacity: 0;
    position: absolute;
  }

  #{$selector} #{$checkbox-selector} ~ i::after {
    border-bottom: 2px solid var(--gds-comp-checkbox-border-color-selected,#fff);
    border-left: 2px solid var(--gds-comp-checkbox-border-color-selected,#fff);
    height: 0.3125rem;
    left: .125rem;
    top: 0.21875rem;
    width: 0.625rem;
    transform: scale(1) rotate(-45deg);
  }

  /* Show the checkmark when checked */
  #{$selector} #{$checkbox-selector}:checked ~ i::after {
    opacity: 1;
  }
}
