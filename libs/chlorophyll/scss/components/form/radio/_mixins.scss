@use '../../../tokens/shame' as tokens;
@use '../../../common';
@use './tokens' as component-tokens;

$valid-color: tokens.$intent-success-background;
$invalid-color: tokens.$intent-danger-background;

/* selectors */

@mixin add-radio(
  $selector: '.form-control',
  $radio-selector: 'input[type="radio"]',
  $validated-selector: '.was-validated'
) {
  /* Hide the browser's default checkbox */
  #{$selector} #{$radio-selector} {
    cursor: pointer;
    height: 0;
    opacity: 0;
    position: absolute;
    width: 0;
    z-index: -1;
  }

  /* Add focus to form-control field */
  #{$selector}:has( input[type="radio"]:focus-visible) {
    @include common.add-focus('within');
  }

  /* Style for custom radio */
  #{$selector} #{$radio-selector} ~ i {
    @include common.add-border(false, 1px, var(--gds-comp-radio-border-color));
    @include common.margin-end(4);
    position: relative;
    border-radius: var(--gds-comp-radio-border-radius);
    background-color: var(--gds-comp-radio-container-color);
    display: flex;
    height: var(--gds-comp-radio-container-width);
    width: var(--gds-comp-radio-container-width);
  }


  #{$selector} #{$radio-selector}:not(:checked):focus-visible ~ i {
    border: 1px solid var(--gds-sys-color-blue-dark-2);
  }

  /* Hover state */
  #{$selector}:hover #{$radio-selector}:not(.disabled,:disabled) ~ i {
    border-color: var(--gds-comp-radio-border-color-selected-hover);
    background-color: var(--gds-comp-radio-hover-container-color);

    &::after {
      background-color: var(--gds-comp-radio-dot-color-hover);
      opacity: 1;
    }
  }

  /* Checked state */
  #{$selector} #{$radio-selector}:checked ~ i {
    //background-color: var(--gds-comp-checkbox-container-color-selected);
  }

  /* Valid state */
  #{$validated-selector} #{$selector} #{$radio-selector}:not(.is-invalid):valid,
  #{$selector} #{$radio-selector}.is-valid {
    ~ i {
      @include common.add-border-color($valid-color);
    }
  }

  /* Invalid state */
  #{$validated-selector} #{$selector} #{$radio-selector}:not(.is-valid):invalid,
  #{$selector} #{$radio-selector}.is-invalid {
    ~ i {
      @include common.add-border-color($invalid-color);
    }
  }

  /* Disabled state */
  #{$selector} #{$radio-selector}:disabled,
  #{$selector} #{$radio-selector}.disabled {
    ~ i {
      @include common.add-disable(false, false, true);
    }

    &:checked ~ i {
      @include common.add-disable(true, false, true);
    }

    &:checked ~ i::after {
      @include common.add-disable(true, false, false);
    }

    ~ span {
      @include common.add-disable(false, true, false);
    }
  }

  /* Checkmark */
  #{$selector} #{$radio-selector} ~ i::after {
    content: '';
    opacity: 0;
    position: absolute;
    transform: scale(calc(8 / 14));
    inset: 0;
    height: 100%;
    width: 100%;
    border-radius: var(--gds-comp-radio-border-radius);
    background-color: var(--gds-comp-radio-dot-color-selected);
  }

  #{$selector} #{$radio-selector}:checked ~ i::after {
    opacity: 1;
  }
}
