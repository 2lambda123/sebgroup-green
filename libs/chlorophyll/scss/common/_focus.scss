@use '../tokens';
@use 'functions';
@use 'sass:map';

@mixin add-outline($color: tokens.$black) {
  outline: 2px solid $color;
  outline-offset: 2px;
}

@mixin add-focus($suffix: 'visible', $target: '') {
  @if $suffix != '' {
    $suffix: '-' + $suffix;
  }

  @if $target != '' {
    #{$target} {
      @include add-outline(transparent);
      transition: all tokens.$transition-time;
      @media (prefers-reduced-motion: reduce) {
        transition: none;
      }
    }
  } @else {
    @include add-outline(transparent);
    transition: all tokens.$transition-time;
    @media (prefers-reduced-motion: reduce) {
      transition: none;
    }
  }



  @if $suffix != '' {
    &:focus:not(:focus-visible) {
      box-shadow: none;
      outline: 0;
    }
  }

  &:focus#{$suffix} #{$target} {
    @include add-outline();

    &:active {
      outline-offset: 0px;
    }
  }
}

@mixin add-outline-focus-state($color: tokens.get(tokens.$blue, 1)) {
  @if (type-of($color) == color) {
    $color: transparentize($color, 0.35);
  }
  &:focus {
    outline: $color solid 2px;
    outline-offset: 2px;
  }

  &:focus:not(:focus-visible) {
    outline: 0;
  }

  &:focus-visible {
    outline: $color solid 2px;
    outline-offset: 2px;
  }
}

@mixin add-hover-state($color: tokens.get(tokens.$blue, 2), $target: '') {
  @if not $target == '' {
    #{$target} {
      transition: all tokens.$transition-time; // TODO: append transition rule...
    }
  } @else {
    transition: all tokens.$transition-time; // TODO: append transition rule...
  }

  &:not(:disabled, .disabled, [aria-disabled]):hover #{$target} {
    @include functions.desired-color-combination(tokens.$white, $color, 20%, 3);
    border-color: nth(
      functions.desired-color-combination(tokens.$white, $color, 20%, 3),
      1
    );
  }
}

@mixin add-active-state(
  $color: tokens.get(tokens.$blue, 0),
  $fadeActiveHover: false
) {
  &[aria-selected],
  &:active,
  &.active,
  &.active:hover,
  &:active:hover {
    @include functions.desired-color-combination(tokens.$white, $color, 20%, 3);
    border-color: nth(
      functions.desired-color-combination(tokens.$white, $color, 20%, 3),
      1
    );
  }
  @if ($fadeActiveHover) {
    &[aria-selected]:hover,
    &.active:hover,
    &:active:hover {
      opacity: 0.9;
    }
  }
}

@mixin add-hover-active-state(
  $hover: tokens.get(tokens.$blue, 2),
  $active: tokens.get(tokens.$blue, 0),
  $fadeActiveHover: false
) {
  @include add-hover-state($hover);
  @include add-active-state($active, $fadeActiveHover);
}

/** add background color, color and border-color to element when it has focus-visible i.e. tab focus */
@mixin add-active-focus-state($color: tokens.$black) {
  &:focus-visible {
    //@include functions.desired-color-combination(tokens.$white, $color, 20%, 3);
    /*border-color: nth(
      functions.desired-color-combination(tokens.$white, $color, 20%, 3),
      1
    ) !important;*/
  }
}
